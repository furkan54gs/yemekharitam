@model MvcCF5.Models.UserAccount

@{
    ViewBag.Title = "Üye Bilgileri";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <style>
        #map {
            height: 400px;
            width: 450px;
        }
    </style>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="column">
            <div class="form-horizontal">
                <div class="container" style="min-height:530px;margin-top:50px">
                    <div class="bodyInner">
                        <h3>Üye Bilgilerini Düzenle</h3>
                        <hr />

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="form-group">
                            @if (Session["Role"].ToString() == "Customer" || Session["Role"].ToString() == "Admin")
                            {
                                @Html.LabelFor(model => model.Name, "Adı-Soyadı", htmlAttributes: new { @class = "control-label col-md-2" })
                            }
                            else
                            {
                                @Html.LabelFor(model => model.Name, "Kurum Adı", htmlAttributes: new { @class = "control-label col-md-2" })
                            }
                            <div class="col-md-2" style="padding-top:7px; color:#D70C0C;">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Role, "Rolü", htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-2" style="padding-top:7px; color:#D70C0C;">
                                @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Password, "Şifre", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.ConfirmPasword, "Şifre(Tekrar)", htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-2">
                                @Html.EditorFor(model => model.ConfirmPasword, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ConfirmPasword, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Tel, "Telefon", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Tel, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Tel, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Resim", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-1">
                                @if (ViewBag.ImgPath == null)
                                {
                                    <a href="javascript:openWin('@Url.Action("UserImgUpload","Home",new { id=Model.Id})','','toolbar=no,location=no,directories=0,status=no,top100,left=200,menuBar=no,scrollBars=no,resizable=no,width=600,height=600');"
                                       class="btn btn-info">
                                        Resim Yükle
                                    </a>
                                }
                                else
                                {
                                    <a href="javascript:openWin('@Url.Action("UserImgUpload","Home",new { id=Model.Id})','','toolbar=no,location=no,directories=0,status=no,top100,left=200,menuBar=no,scrollBars=no,resizable=no,width=600,height=600');"
                                       class="btn btn-warning">
                                        Resmi Değiştir
                                    </a>
                                }
                            </div>
                            @if (Model.Role == "Supplier")
                            {
                                @Html.LabelFor(model => model.Distance, "Max Sipariş Uzaklığı", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-1">
                                    @Html.EditorFor(model => model.Distance, new { htmlAttributes = new { @class = "form-control", placeholder = "km" } })
                                    @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
                                </div>
                            }

                        </div>
                        <div class="form-group" hidden>
                            @Html.LabelFor(model => model.Latitude, "Enlem", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-1">
                                @Html.TextBoxFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.Longtitude, "Boylam", htmlAttributes: new { @class = "control-label col-md-1" })
                            <div class="col-md-1">
                                @Html.TextBoxFor(model => model.Longtitude, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Longtitude, "", new { @class = "text-danger" })
                            </div>

                            @*<button style="margin-left:50px" class="btn btn-primary">Konum Seç</button>*@
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Latitude, "Enlem", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-1">
                                <div style="margin-top:10%;" class="single-line" id="latmoved"></div>
                            </div>
                            @Html.LabelFor(model => model.Longtitude, "Boylam", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-1">
                                <div style="margin-top:10%;" class="single-line" id="longmoved"></div>
                            </div>
                        </div>
                        @if (Model.Role == "Supplier")
                        {
                            <div class="form-group">
                                @Html.Label("detail", "Şirket Detayı", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-5">
                                    <textarea class="form-control" cols="20" id="detail" name="detail" rows="4">@ViewBag.suppDetail</textarea>
                                    @*@Html.TextArea("detail", new { @class = "form-control",value= ViewBag.suppDetail })*@
                                </div>
                            </div>
                        }

                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, "Açık Adres", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = "4" })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                            <br />
                            <div class="col-md-offset-2 col-md-5">
                                <br />
                                <input type="submit" value="Kaydet" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div style="position:absolute;top:200px;right:100px;" id="map"></div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAXx4aEGCsJv_BedqPOehaxCjyVT9i25ls&callback=initMap"
        async defer></script>
<script type="text/javascript">
        var map;

        function initMap() {


            var x = '@Model.Latitude';
            var y = '@Model.Longtitude';

            x = x.replace(',', '.');
            y = y.replace(',', '.');

            var latitude = parseFloat(x);
            var longitude = parseFloat(y);

            var myLatLng = { lat: latitude, lng: longitude };

            map = new google.maps.Map(document.getElementById('map'), {
                center: myLatLng,
                zoom: 13,
                disableDoubleClickZoom: true,
            });


            google.maps.event.addListener(map, 'click', function (event) {

                document.getElementById('Latitude').value = event.latLng.lat().toString().replace('.', ',');
                document.getElementById('Longtitude').value = event.latLng.lng().toString().replace('.', ',');
            });


            google.maps.event.addListener(map, 'mousemove', function (event) {
                document.getElementById('latmoved').innerHTML = event.latLng.lat().toString().replace('.', ',');
                document.getElementById('longmoved').innerHTML = event.latLng.lng().toString().replace('.', ',');
            });

            var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: latitude + ', ' + longitude
            });


            marker.addListener('click', function (event) {
                document.getElementById('Latitude').value = event.latLng.lat().toString().replace('.', ',');
                document.getElementById('Longtitude').value = event.latLng.lng().toString().replace('.', ',');
            });

            google.maps.event.addListener(map, 'dblclick', function (event) {
                var marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map,
                    title: event.latLng.lat() + ', ' + event.latLng.lng()
                });

                marker.addListener('click', function () {
                    document.getElementById('Latitude').value = event.latLng.lat().toString().replace('.', ',');
                    document.getElementById('Longtitude').value = event.latLng.lng().toString().replace('.', ',');
                });
            });

        }
</script>


<SCRIPT language="JavaScript">
    function openWin(windowURL, windowName, windowFeatures) {
        window.open(windowURL, windowName, windowFeatures);
    }
</SCRIPT>
